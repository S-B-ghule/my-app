{"version":3,"sources":["components/About.js","components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["About","props","myStyle","color","mode","backgroundColor","className","style","id","type","Alert","height","alert","role","msg","Navbar","to","title","aboutText","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","heading","value","onChange","event","target","rows","disabled","length","newText","toUpperCase","showAlert","toLowerCase","SpeechSynthesisUtterance","window","speechSynthesis","speak","navigator","clipboard","writeText","document","getSelection","removeAllRanges","split","join","filter","elemnet","App","setMode","setAlert","message","setTimeout","body","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1da122d6.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function About(props) {\r\n  //   const [myStyle,setMyStyle] = useState({\r\n  //       color: 'white',                // Remember to write background Colour in the Camel case.\r\n  //      backgroundColor: 'black'\r\n  //  })\r\n  let myStyle = {\r\n    color: props.mode === 'dark'?'white':'#27358c',\r\n    backgroundColor: props.mode ==='dark'?'#27358c':'white',\r\n  }\r\n  \r\n    \r\n  return (\r\n    <div className=\"container\" style={{color: props.mode === 'dark'?'white':'#27358c'}}>\r\n     <h1 className=\"my-3\">About us</h1>\r\n      <div className=\"accordion\" id=\"accordionExample\" style={myStyle}  >\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingOne\">\r\n            <button\r\n              className=\"accordion-button\"\r\n              style={myStyle}\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseOne\"\r\n              aria-expanded=\"true\"\r\n              aria-controls=\"collapseOne\"\r\n            >\r\n            <strong>About Text Modifier</strong> \r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseOne\"\r\n            className=\"accordion-collapse collapse show\"\r\n            aria-labelledby=\"headingOne\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\"  style={myStyle}>\r\n             Text Modifier is an free to use application to manipulate your text in ways you like. Do try our Dark Mode as well. It has been made using React. Hopefully you will enjoy it! Visit again.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              type=\"button\"\r\n              style={myStyle}\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseTwo\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseTwo\"\r\n            >\r\n              <strong>Resonsive</strong>\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseTwo\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingTwo\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\"  style={myStyle}>\r\n              Text Modifier is an responsive application you can use it on any device like Tab,Mobile and Desktop. And also it has Browser comptability. So keep using keep learning! \r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingThree\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              type=\"button\"\r\n              style={myStyle}\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseThree\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseThree\"\r\n            >\r\n             <strong>About developer</strong>\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseThree\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingThree\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\"  style={myStyle}>\r\n              <strong>LOL!</strong> Who Cares.ðŸ˜­\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n    </div>\r\n  );\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    \r\n  // const capitalize = (word)=>{\r\n  //   const lower = word.toLowerCase();\r\n  //   return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n\r\n  //  }\r\n\r\n    return (\r\n      <div style={{height: '50px'}}>\r\n       {/* this props.alert and && is an syntax its says that if props.alet is true then only return the next code else false */}\r\n      { props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{props.alert.type}</strong>{props.alert.msg }\r\n      </div>}\r\n      </div>\r\n\r\n    )\r\n}\r\n","//This are componets we can reuse it multiple times \r\n//components are nothing but just like js function which takes a arbitary inputs knowns as props and it is resuable also\r\n//You can pass as many props you want and props could be anything like array,object,link etc etc\r\n//props are read only\r\n\r\n\r\n\r\n\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'   //shortcut impt\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nexport default function Navbar(props) {   //here props.title means we can use it for anyother app also and can change also for a specific name or content\r\n    return (\r\n      //below line is writeen in { } and `` bcz to use js and template literal and props.mode is basically writeen for light and dark mode\r\n       <nav className= {`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>  \r\n\r\n  <div className=\"container-fluid\">\r\n    <Link className=\"navbar-brand\" to=\"#\">{props.title}</Link>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span> \r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\"> \r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <Link className=\"nav-link\" aria-current=\"page\" to=\"/\">Home</Link>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n        </li>\r\n       \r\n      </ul>\r\n      {/* <form className=\"d-flex\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n      </form> */}\r\n      <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n  <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n</div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n\r\n    )\r\n}\r\n\r\n//Proptypes are for a specified datatype for eg here we have set title as propType is string so when we will add a number by mistake it will give error in console\r\n//you can set anyting like if you want array or object number etc\r\n//isrequired is for adding that thing compulsory or it will give error if you have not set the default props\r\nNavbar.propTypes = {title: PropTypes.string.isRequired,\r\n                    aboutText: PropTypes.string.isRequired,\r\n                    }\r\n\r\n//setting default prop here \r\n// Navbar.defaultProps = {\r\n//   title: \"Add a fcking titile\",\r\n//   aboutText:\"Fill me\",\r\n// }\r\n\r\n","\r\nimport React, {useState}  from \"react\";\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpperClick = ()=>{\r\n        // console.log('You clicked upper click function'+text);\r\n        let newText = text.toUpperCase();\r\n        props.showAlert(\" Converted to Uppercase!\", \"success\");\r\n        setText(newText);  \r\n    }\r\n    const handleLowerClick = ()=>{\r\n        // console.log('You clicked upper click function'+text);\r\n        let newText = text.toLowerCase();\r\n        props.showAlert(\" Converted to Lowercase!\", \"success\");\r\n\r\n        setText(newText); \r\n    }\r\n    const handleClearClick = ()=>{\r\n        // console.log('You clicked upper click function'+text);\r\n        let newText = '';\r\n        props.showAlert(\" Text has been Cleared!\", \"success\");\r\n\r\n        setText(newText);  \r\n    }\r\n   \r\n    const handleSpeakClick = ()=>{\r\n        // console.log('You clicked upper click function'+text);\r\n        let msg = new SpeechSynthesisUtterance();\r\n        msg.text = text;\r\n        window.speechSynthesis.speak(msg);\r\n        props.showAlert(\" I am reading your text!\", \"success\");\r\n\r\n    }\r\n\r\n    const handleCopy = ()=>{        //navigator clipboard allows you to copy all the text you dont have to grab the id here\r\n        navigator.clipboard.writeText(text);\r\n        document.getSelection().removeAllRanges();\r\n        props.showAlert(\" Your text has been copied to Clipboard!\", \"success\");\r\n\r\n    }\r\n\r\n    const handleExtraSpaces = ()=>{\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\" Your Extra Spaces has been removed!\", \"success\");\r\n\r\n    }\r\n\r\n    const handleOnchange=(event)=>{                //to update state it compulsory to write this handleOnchange fn\r\n        // console.log('On change');                     //this onchange event helps to edit the textbox\r\n        setText(event.target.value);                  //this setText for editing the textBox   \r\n    }\r\n    const[text,setText] = useState('');\r\n    \r\n\r\n    return (\r\n        <>\r\n        <div className='container mb-4' style={{color: props.mode=== 'dark'?'white':'#122788'}}>\r\n         <h1>{props.heading} </h1>       {/*heading is written in App.js file */}\r\n        <div className=\"mb-3\">\r\n        {/* here we are writing some logic for dark mode using ternary operators and using props */}\r\n        <textarea className=\"form-control\" value={text} onChange={handleOnchange} style={{backgroundColor: props.mode==='dark'? '#2d2c4687': 'white', color:props.mode=== 'dark'?'white': '#122788'}}\r\n id=\"myBox\" rows=\"8\"></textarea>\r\n      </div>\r\n      <button disabled={text.length===0} className =\"btn btn-primary\" onClick={handleUpperClick}>Convert text to Uppercase</button>\r\n      <button disabled={text.length===0}className  =\"btn btn-primary mx-1 my-1\" onClick={handleLowerClick}>Convert text to Lowercase</button>\r\n      <button disabled={text.length===0}className  =\"btn btn-primary mx-1 my-1\" onClick={handleClearClick}>Clear text</button>\r\n      <button disabled={text.length===0}className  =\"btn btn-primary mx-1 my-1\" onClick={handleSpeakClick}>Can I read for U?</button>\r\n      <button disabled={text.length===0}className  =\"btn btn-primary mx-1 my-1\" onClick={handleCopy}>Copy Text</button>\r\n      <button disabled={text.length===0}className  =\"btn btn-primary mx-1 my-1\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n      </div>\r\n      {/* below styles is for summary and preview section */}\r\n      <div className=\"container my-3 \" style={{color: props.mode=== 'dark'?'white':'#122788'}}>\r\n          <h2>Your Summary</h2>\r\n             <p>{text.split(/\\s+/).filter((elemnet)=>{return elemnet.length!==0}).length}<b> words</b> and <b>{text.length} Character</b></p>\r\n             {/* <p>{Math.floor((0.008 * text.split(\"\").length/3))} Minutes to read</p> */}\r\n             <p>You will need {0.008 * text.split(\" \").filter((elemnet)=>{return elemnet.length!==0}).length} <b>minutes</b> to read.</p>\r\n            <h2>Your preview</h2>\r\n             <p>{text.length>0?text:\"Nothing to preview!\"}</p>\r\n      </div>\r\n      </>\r\n    )\r\n\r\n    }","\r\nimport About from \"./components/About\";\r\nimport Alert from \"./components/Alert\";\r\nimport Navbar from \"./components/Navbar\";\r\nimport TextForm from \"./components/TextForm\";\r\nimport React, {useState} from 'react'\r\n\r\n//importing react router\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  \r\n} from \"react-router-dom\";\r\n\r\n\r\nfunction App() {\r\n  const[mode, setMode] = useState('light');\r\n\r\n  const [alert, setAlert] = useState('null');\r\n\r\n  const showAlert = (message,type)=>{\r\n    setAlert({\r\n    msg: message,\r\n    type: type\r\n  })\r\n  setTimeout(() => {\r\n    setAlert(null)\r\n  }, 1500);\r\n  }\r\n\r\n  const toggleMode = ()=>{\r\n    if(mode === 'light'){\r\n      setMode('dark');\r\n    document.body.style.backgroundColor = '#122788';\r\n    showAlert(\" Dark Mode has been Enabled\", \"success\")\r\n    }\r\n    else{ \r\n    setMode('light');\r\n    document.body.style.backgroundColor = 'white';\r\n    showAlert(\" Light Mode has been Enabled\", \"success\")\r\n\r\n    }\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n<Router>\r\n     {/* importing Navbar components  */}\r\n      <Navbar title=\"Text Modifier\"  aboutText=\"About\" mode={mode} toggleMode={toggleMode}/>       \r\n      <Alert alert={alert}/>\r\n\r\n      {/* Adding a prop for textarea table  */}\r\n      <div className=\"container my-3\">\r\n        <Switch> \r\n          <Route path=\"/about\">\r\n            <About mode={mode}/>\r\n          </Route> \r\n         \r\n          <Route path=\"/\">\r\n        <TextForm  showAlert ={showAlert} heading=\"Try Text Modifier -Word Counter,Character counter \" mode={mode}/>\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n      </Router>\r\n  </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n// npx create-react-app my-app           //follow this in terminal to run the app\r\n// cd my-app\r\n// npm start\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}